public class BitwiseOperators {











    public static void main(String[] args) {
        int a = 60;	/* 60 = 0011 1100 */
        int b = 13;	/* 13 = 0000 1101 */
        int c = -88;   /* -88 = 1111 1111 1111 1111 1111 1111 1010 1000 */

        System.out.println("Бит в результат, если он существует в обоих операндах. a & b = " + (a & b));     /* 12 = 0000 1100 */
        // | &   | И                    | Бит в результат, если он существует в обоих операндах
        System.out.println("Копирует бит, если он существует в любом из операндов. a | b = " + (a | b));     /* 61 = 0011 1101 */
        // | |   | Или                  | Копирует бит, если он существует в любом из операндов
        System.out.println("Копирует бит, если он установлен в одном операнде, но не в обоих. a ^ b = " + (a ^ b));     /* 49 = 0011 0001 */
        // | ^   | Логическое или       | Копирует бит, если он установлен в одном операнде, но не в обоих
        System.out.println("Заменяет значение бита на противоположное (эффект «отражения»). ~a = " + (~a));           /* -61 = 1100 0011 */
        // | ~   | Дополнение           | Заменяет значение бита на противоположное (эффект «отражения»)
        System.out.println("Смещение значений левого операнда влево на количество бит, заданное правым операндом c учетом знака (арифметический сдвиг). a << 2 = " + (a << 2));   /* 240 = 1111 0000 */
        // | <<  | Сдвиг влево	        | Смещение значений левого операнда влево на количество бит, заданное правым операндом c учетом знака (арифметический сдвиг)
        System.out.println("Смещение значений левого операнда вправо на количество бит, заданное правым операндом c учетом знака (арифметический сдвиг). a >> 2  = " + (a >> 2));  /* 15 = 0000 1111 */
        // | >>  | Сдвиг вправо	        | Смещение значений левого операнда вправо на количество бит, заданное правым операндом c учетом знака (арифметический сдвиг)
        System.out.println("Смещение значений левого операнда вправо на количество бит, заданное правым операндом без учета знака (логический сдвиг). a >>> 2 = " + (a >>> 2)); /* 15 = 0000 1111 */
        // | >>> | Нулевой сдвиг вправо | Смещение значений левого операнда вправо на количество бит, заданное правым операндом без учета знака (логический сдвиг)

        System.out.println("c >> 2 = " + (c >> 2));   /* -11 = 1111 1111 1111 1111 1111 1111 1111 0101 */
        System.out.println("c >>> 2 = " + (c >>> 2)); /* 536870901 = 0001 1111 1111 1111 1111 1111 1111 0101 */

    }
}
